import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const connectDatabase = async () => {
  try {
    const mongoURI = process.env.MONGODB_URI;
    const dbName = process.env.DB_NAME || 'whatsapp';
    
    if (!mongoURI) {
      throw new Error('MONGODB_URI environment variable is not defined');
    }
    
    console.log('üîÑ Connecting to MongoDB Atlas...');
    console.log(`üìä Target Database: ${dbName}`);
    console.log(`üîó Cluster: whatsapp-web-cluster`);
    console.log(`üåê Environment: ${process.env.NODE_ENV}`);
    console.log(`üéØ Frontend URL: ${process.env.FRONTEND_URL}`);
    
    // ‚úÖ FIXED: Use only supported MongoDB connection options
    const connectionOptions = {
      // Database name
      dbName: dbName,
      
      // Connection timeout settings
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 30000,
      
      // Connection pool settings
      maxPoolSize: 10,
      minPoolSize: 2,
      maxIdleTimeMS: 30000,
      
      // Retry settings
      retryWrites: true,
      retryReads: true
    };

    console.log('‚ö° Establishing connection with supported options...');
    const conn = await mongoose.connect(mongoURI, connectionOptions);

    console.log('');
    console.log('‚úÖ MongoDB Atlas Connected Successfully!');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üè† Host: ${conn.connection.host}`);
    console.log(`üìä Database: ${conn.connection.name}`);
    console.log(`üîó Connection State: ${mongoose.connection.readyState === 1 ? 'Connected ‚úÖ' : 'Disconnected ‚ùå'}`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('');

    // Connection event listeners
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå MongoDB connection error:', err);
    });

    mongoose.connection.on('disconnected', () => {
      console.warn('‚ö†Ô∏è MongoDB disconnected at:', new Date().toISOString());
    });

    mongoose.connection.on('reconnected', () => {
      console.log('üîÑ MongoDB reconnected successfully at:', new Date().toISOString());
    });

    return conn;

  } catch (error) {
    console.error('');
    console.error('‚ùå Database Connection Failed!');
    console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.error('üö® Error Message:', error.message);
    console.error('üìÖ Timestamp:', new Date().toISOString());
    console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.error('');
    
    if (process.env.NODE_ENV === 'production') {
      console.error('üí• Exiting due to database connection failure in production');
      process.exit(1);
    } else {
      console.warn('‚ö†Ô∏è Continuing without database in development mode');
    }
    
    throw error;
  }
};

// Graceful shutdown
const gracefulShutdown = async () => {
  try {
    await mongoose.connection.close();
    console.log('‚úÖ MongoDB connection closed gracefully');
  } catch (error) {
    console.error('‚ùå Error closing MongoDB connection:', error);
  }
};

process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

export default connectDatabase;
